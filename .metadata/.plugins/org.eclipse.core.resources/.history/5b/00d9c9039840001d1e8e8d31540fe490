package ruiji_CSCI201_Assignment2;

import java.util.List;
import java.util.concurrent.Semaphore;

public class Operations extends Thread {
	private Semaphore semaphore;
	private String ticker;
	private String quantity;
	private List<Integer> current_balance;
	private int stock_price;
	
	public Operations(int Broker_num, String ticker, String quantity, List<Integer> current_balance, int stock_price) {
		this.semaphore = new Semaphore(Broker_num);
		this.ticker = ticker;
		this.quantity = quantity;
		this.current_balance = current_balance;
		this.stock_price = stock_price;
	}
	
	public void run() {
		try {
			semaphore.acquire();                        //acquire the lock. 
			Thread.sleep(2000);                         //sleep for 2 seconds first before trade
		} catch (InterruptedException ie) {
			System.out.println("MyThread.run IE: " + ie.getMessage());
		}finally {
			semaphore.release();
		}
	}
}
